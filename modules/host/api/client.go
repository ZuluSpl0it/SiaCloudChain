package api

// Code generated by api2. DO NOT EDIT.

import (
	"context"
	"net/url"

	"github.com/starius/api2"
)

type Client struct {
	api2client *api2.Client
}

var _ HandlerHTTPapi = (*Client)(nil)

func NewClient(baseURL string, opts ...api2.Option) (*Client, error) {
	if _, err := url.ParseRequestURI(baseURL); err != nil {
		return nil, err
	}
	routes := GetRoutes(nil)
	api2client := api2.NewClient(routes, baseURL, opts...)
	return &Client{
		api2client: api2client,
	}, nil
}

func (c *Client) Close() error {
	return c.api2client.Close()
}

func (c *Client) Health(ctx context.Context, req *HealthRequest) (res *HealthResponse, err error) {
	res = &HealthResponse{}
	err = c.api2client.Call(ctx, res, req)
	if err != nil {
		return nil, err
	}
	return
}

func (c *Client) TokenResources(ctx context.Context, req *TokenResourcesRequest) (res *TokenResourcesResponse, err error) {
	res = &TokenResourcesResponse{}
	err = c.api2client.Call(ctx, res, req)
	if err != nil {
		return nil, err
	}
	return
}

func (c *Client) ListSectorIDs(ctx context.Context, req *ListSectorIDsRequest) (res *ListSectorIDsResponse, err error) {
	res = &ListSectorIDsResponse{}
	err = c.api2client.Call(ctx, res, req)
	if err != nil {
		return nil, err
	}
	return
}

func (c *Client) RemoveSectors(ctx context.Context, req *RemoveSectorsRequest) (res *RemoveSectorsResponse, err error) {
	res = &RemoveSectorsResponse{}
	err = c.api2client.Call(ctx, res, req)
	if err != nil {
		return nil, err
	}
	return
}

func (c *Client) DownloadWithToken(ctx context.Context, req *DownloadWithTokenRequest) (res *DownloadWithTokenResponse, err error) {
	res = &DownloadWithTokenResponse{}
	err = c.api2client.Call(ctx, res, req)
	if err != nil {
		return nil, err
	}
	return
}

func (c *Client) UploadWithToken(ctx context.Context, req *UploadWithTokenRequest) (res *UploadWithTokenResponse, err error) {
	res = &UploadWithTokenResponse{}
	err = c.api2client.Call(ctx, res, req)
	if err != nil {
		return nil, err
	}
	return
}

func (c *Client) AttachSectors(ctx context.Context, req *AttachSectorsRequest) (res *AttachSectorsResponse, err error) {
	res = &AttachSectorsResponse{}
	err = c.api2client.Call(ctx, res, req)
	if err != nil {
		return nil, err
	}
	return
}
